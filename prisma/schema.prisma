// Prisma schema voor Starterskalender
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  HR_ADMIN
  ENTITY_EDITOR
  ENTITY_VIEWER
  GLOBAL_VIEWER
  NONE
}

enum NotificationType {
  WEEKLY_REMINDER    // 1 week voor opstart
  MONTHLY_SUMMARY    // Maandelijkse samenvatting
  QUARTERLY_SUMMARY  // Kwartaal samenvatting
  YEARLY_SUMMARY     // Jaarlijks overzicht
}

model User {
  id                      String                   @id @default(cuid())
  email                   String                   @unique
  password                String?                  // Optional: legacy auth only
  name                    String?
  role                    Role                     @default(NONE) // New users start as NONE (guest)
  
  // Azure AD / Entra ID fields
  tenantId                String?                  // Azure AD tenant ID (tid claim)
  oid                     String?                  // Azure AD object ID (oid claim)
  
  memberships             Membership[]
  notificationPreferences NotificationPreference[]
  twoFASecret             String?                  // TOTP secret voor 2FA
  twoFAEnabled            Boolean                  @default(false)
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  lastLoginAt             DateTime?                // Tijdstip van laatste succesvolle login

  @@index([email])
  @@index([tenantId])
  @@index([oid])
}

model Entity {
  id                      String                   @id @default(cuid())
  name                    String                   @unique
  colorHex                String                   // Kleur voor badges/kaartjes
  isActive                Boolean                  @default(true)
  notifyEmails            String[]                 // Array van e-mailadressen voor reminders (legacy)
  memberships             Membership[]
  starters                Starter[]
  jobRoles                JobRole[]
  blockedPeriods          BlockedPeriod[]
  notificationPreferences NotificationPreference[]
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt

  @@index([isActive])
}

model Membership {
  id       String  @id @default(cuid())
  userId   String
  entityId String
  canEdit  Boolean @default(false) // false = viewer, true = editor
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  entity   Entity  @relation(fields: [entityId], references: [id], onDelete: Cascade)

  @@unique([userId, entityId])
  @@index([userId])
  @@index([entityId])
}

model Starter {
  id           String    @id @default(cuid())
  entityId     String?
  entity       Entity?   @relation(fields: [entityId], references: [id], onDelete: SetNull)
  name         String
  language     String    @default("NL") // Taal: NL of FR
  region       String?   // Regio (dropdown)
  roleTitle    String?   // Functie
  via          String?   // Via (dropdown)
  notes        String?   @db.Text // Extra info
  phoneNumber  String?   // Telefoonnummer (optioneel, kan later toegevoegd)
  desiredEmail String?   // Gewenst mailadres
  startDate    DateTime  // Startdatum
  weekNumber   Int?      // Weeknummer (afgeleid, Monday-first)
  year         Int       // Jaar
  isCancelled  Boolean   @default(false) // Of de starter is geannuleerd
  cancelledAt  DateTime? // Wanneer geannuleerd
  cancelledBy  String?   // User ID die annuleerde
  cancelReason String?   @db.Text // Reden van annulering
  
  // Ervaring velden
  hasExperience    Boolean   @default(false) // Heeft de starter relevante werkervaring?
  experienceSince  DateTime? // Startdatum van ervaring (om duur te berekenen)
  experienceRole   String?   // Functie waarin ervaring opgedaan
  experienceEntity String?   // Entiteit/bedrijf waar ervaring opgedaan (vrij veld)
  
  createdBy        String?           // User ID die het aanmaakte
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  starterMaterials StarterMaterial[] // Materiaal toegewezen aan deze starter

  @@index([year, startDate])
  @@index([entityId, year])
  @@index([weekNumber, year])
  @@index([isCancelled])
}

model DropdownOption {
  id       String  @id @default(cuid())
  group    String  // bv. "Regio", "Via", etc.
  label    String  // Weergave label
  value    String  // Interne waarde
  order    Int     @default(0) // Sorteervolgorde
  isActive Boolean @default(true)

  @@index([group, isActive])
  @@index([group, order])
}

model JobRole {
  id             String          @id @default(cuid())
  entityId       String
  entity         Entity          @relation(fields: [entityId], references: [id], onDelete: Cascade)
  title          String             // Functietitel (bv. "Senior Developer")
  description    String?            @db.Text // Optionele beschrijving
  isActive       Boolean            @default(true)
  order          Int                @default(0) // Sorteervolgorde
  blockedPeriods BlockedPeriod[]
  materials      JobRoleMaterial[]  // Materiaal gekoppeld aan deze functie
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@unique([entityId, title])
  @@index([entityId, isActive])
  @@index([entityId, order])
}

model BlockedPeriod {
  id          String   @id @default(cuid())
  entityId    String
  entity      Entity   @relation(fields: [entityId], references: [id], onDelete: Cascade)
  jobRoleId   String?  // Optioneel: specifieke functie blokkeren (null = alle functies)
  jobRole     JobRole? @relation(fields: [jobRoleId], references: [id], onDelete: Cascade)
  startDate   DateTime // Begin van geblokkeerde periode
  endDate     DateTime // Einde van geblokkeerde periode
  reason      String?  @db.Text // Reden voor blokkade
  isActive    Boolean  @default(true)
  createdBy   String?  // User ID die blokkade aanmaakte
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([entityId, isActive])
  @@index([jobRoleId, isActive])
  @@index([startDate, endDate])
}

model AllowedTenant {
  id          String   @id @default(cuid())
  tenantId    String   @unique // Azure AD Tenant ID
  tenantName  String   // Organisatie naam voor display
  domain      String?  // Primary domain (optioneel, bijv. "company.com")
  isActive    Boolean  @default(true)
  notes       String?  @db.Text // Admin notities
  createdBy   String?  // User ID die het toevoegde
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([tenantId, isActive])
  @@index([isActive])
}

model Material {
  id          String            @id @default(cuid())
  name        String            @unique // Materiaalnaam (bv. "Laptop", "Telefoon", "Badge")
  description String?           @db.Text // Optionele beschrijving
  category    String?           // Categorie (bv. "Hardware", "Software", "Toegang")
  isActive    Boolean           @default(true)
  order       Int               @default(0) // Sorteervolgorde
  jobRoles    JobRoleMaterial[] // Functies die dit materiaal nodig hebben
  starterMaterials StarterMaterial[] // Starters aan wie dit materiaal is toegewezen
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@index([isActive])
  @@index([category, isActive])
  @@index([order])
}

model JobRoleMaterial {
  id        String   @id @default(cuid())
  jobRoleId String
  jobRole   JobRole  @relation(fields: [jobRoleId], references: [id], onDelete: Cascade)
  materialId String
  material  Material @relation(fields: [materialId], references: [id], onDelete: Cascade)
  isRequired Boolean  @default(true) // Of het materiaal verplicht is voor deze functie
  notes     String?  @db.Text // Extra notities (bv. "Alleen voor senior niveau")
  createdAt DateTime @default(now())

  @@unique([jobRoleId, materialId])
  @@index([jobRoleId])
  @@index([materialId])
}

model StarterMaterial {
  id          String    @id @default(cuid())
  starterId   String
  starter     Starter   @relation(fields: [starterId], references: [id], onDelete: Cascade)
  materialId  String
  material    Material  @relation(fields: [materialId], references: [id], onDelete: Cascade)
  isProvided  Boolean   @default(false) // Of het materiaal is verstrekt
  providedAt  DateTime? // Wanneer verstrekt
  providedBy  String?   // User ID die het heeft verstrekt
  notes       String?   @db.Text // Extra notities
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([starterId, materialId])
  @@index([starterId])
  @@index([materialId])
  @@index([isProvided])
}

// Notificatie voorkeuren per gebruiker per entiteit
model NotificationPreference {
  id               String           @id @default(cuid())
  userId           String
  entityId         String
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  entity           Entity           @relation(fields: [entityId], references: [id], onDelete: Cascade)
  
  // Notificatie toggles per type
  weeklyReminder   Boolean          @default(true)  // 1 week voor opstart
  monthlySummary   Boolean          @default(true)  // Maandelijkse samenvatting
  quarterlySummary Boolean          @default(true)  // Kwartaal samenvatting
  yearlySummary    Boolean          @default(true)  // Jaarlijks overzicht
  
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@unique([userId, entityId])
  @@index([userId])
  @@index([entityId])
}

// Email templates voor notificaties
model EmailTemplate {
  id          String           @id @default(cuid())
  type        NotificationType @unique // WEEKLY_REMINDER, MONTHLY_SUMMARY, etc.
  subject     String           // Email onderwerp (met variabelen)
  body        String           @db.Text // Email body HTML (met variabelen)
  isActive    Boolean          @default(true)
  
  // Beschrijving van beschikbare variabelen
  description String?          @db.Text
  
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  createdBy   String?          // User ID die template aanmaakte
  updatedBy   String?          // User ID die template laatst wijzigde

  @@index([type])
  @@index([isActive])
}

model AuditLog {
  id        String   @id @default(cuid())
  actorId   String?  // User ID
  action    String   // CREATE, UPDATE, DELETE, EMAIL_SENT, etc.
  target    String?  // Resource type + ID (bv. "Starter:abc123")
  meta      Json?    // Extra metadata
  createdAt DateTime @default(now())

  @@index([actorId])
  @@index([action])
  @@index([createdAt])
}

// System settings voor branding en configuratie
model SystemSettings {
  id        String   @id @default(cuid())
  key       String   @unique // bv. "logo_url", "company_name"
  value     String?  @db.Text
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  updatedBy String?  // User ID die instelling laatst wijzigde

  @@index([key])
}

